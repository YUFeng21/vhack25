import Agent from "agentkeepalive";
import { AxiosInstance, AxiosResponse } from "axios";
import { z, ZodSchema } from "zod";
/**
 * Configuration type for initializing the APIClient.
 */
type BaseConfig = {
    maxRetries?: number;
    httpClient?: AxiosInstance;
    timeout?: number;
    dangerouslyAllowBrowser?: boolean;
};
type ConfigWithBaseURL = BaseConfig & {
    baseURL: string;
    token?: string;
    projectId?: string;
};
type ConfigWithoutBaseURL = BaseConfig & {
    baseURL?: string;
    token: string;
    projectId: string;
};
export type TConfig = ConfigWithBaseURL | ConfigWithoutBaseURL;
export declare abstract class Base {
    protected maxRetries: number;
    protected httpClient: AxiosInstance;
    protected timeout: number | undefined;
    private sdkVersion;
    /**
     * Creates an instance of APIClient.
     * @param {string} baseURL Base URL for the API requests. Default url is - https://api.jamaibase.com
     * @param {string} token PAT.
     * @param {string} projectId Project ID.
     * @param {number=} [maxRetries=0] Maximum number of retries for failed requests. Defaults value is 0.
     * @param {AxiosInstance} [httpClient] Axios instance for making HTTP requests. If not provided, a default instance will be created.
     * @param {number} [timeout] Timeout (ms) for the requests. Default value is none.
     */
    constructor({ baseURL, token, projectId, maxRetries, httpClient, timeout, dangerouslyAllowBrowser }: TConfig);
    /**
     * Options for configuring the HTTP agent.
     * @property {Boolean} [keepAlive=true] - Keep sockets around in a pool to be used by other requests in the future. Default is true.
     * @property {Number} [keepAliveMsecs=1000] - Initial delay for TCP Keep-Alive packets when keepAlive is enabled. Defaults to 1000 milliseconds. Only relevant if keepAlive is true.
     * @property {Number} [freeSocketTimeout=20000] - Timeout for free sockets after inactivity, in milliseconds. Default is 20000 milliseconds. Only relevant if keepAlive is true.
     * @property {Number} [timeout] - Timeout for working sockets after inactivity, in milliseconds. Default is calculated as freeSocketTimeout * 2 if greater than or equal to 8000 milliseconds, otherwise the default is 8000 milliseconds.
     * @property {Number} [maxSockets=Infinity] - Maximum number of sockets to allow per host. Default is Infinity.
     * @property {Number} [maxFreeSockets=10] - Maximum number of free sockets per host to keep open. Only relevant if keepAlive is true. Default is 10.
     * @property {Number} [socketActiveTTL=null] - Sets the time to live for active sockets, even if in use. If not set, sockets are released only when free. Default is null.
     */
    protected setHttpagentConfig(payload: Agent.HttpOptions): void;
    /**
     * Options for configuring the HTTP agent.
     * @property {Boolean} [keepAlive=true] - Keep sockets around in a pool to be used by other requests in the future. Default is true.
     * @property {Number} [keepAliveMsecs=1000] - Initial delay for TCP Keep-Alive packets when keepAlive is enabled. Defaults to 1000 milliseconds. Only relevant if keepAlive is true.
     * @property {Number} [freeSocketTimeout=20000] - Timeout for free sockets after inactivity, in milliseconds. Default is 20000 milliseconds. Only relevant if keepAlive is true.
     * @property {Number} [timeout] - Timeout for working sockets after inactivity, in milliseconds. Default is calculated as freeSocketTimeout * 2 if greater than or equal to 8000 milliseconds, otherwise the default is 8000 milliseconds.
     * @property {Number} [maxSockets=Infinity] - Maximum number of sockets to allow per host. Default is Infinity.
     * @property {Number} [maxFreeSockets=10] - Maximum number of free sockets per host to keep open. Only relevant if keepAlive is true. Default is 10.
     * @property {Number} [socketActiveTTL=null] - Sets the time to live for active sockets, even if in use. If not set, sockets are released only when free. Default is null.
     */
    protected setHttpsagentConfig(payload: Agent.HttpsOptions): void;
    protected health(): Promise<AxiosResponse>;
    protected setApiKey(token: string): void;
    protected setProjId(projectId: string): void;
    protected setAuthHeader(header: string): void;
    protected logWarning(response: AxiosResponse<any, any>): void;
    protected handleResponse<T extends ZodSchema<any>>(response: AxiosResponse<any, any>, schema?: T): z.infer<T>;
    private getLanguageAndVersion;
    private generateUserAgent;
}
export {};
