import { z } from "zod";
export declare const EmbeddingRequestSchema: z.ZodObject<{
    input: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>;
    model: z.ZodString;
    type: z.ZodDefault<z.ZodEnum<["query", "document"]>>;
    encoding_format: z.ZodDefault<z.ZodEnum<["float", "base64"]>>;
}, "strip", z.ZodTypeAny, {
    type: "document" | "query";
    model: string;
    input: (string | string[]) & (string | string[] | undefined);
    encoding_format: "float" | "base64";
}, {
    model: string;
    input: (string | string[]) & (string | string[] | undefined);
    type?: "document" | "query" | undefined;
    encoding_format?: "float" | "base64" | undefined;
}>;
export declare const EmbeddingResponseDataSchema: z.ZodObject<{
    object: z.ZodDefault<z.ZodString>;
    embedding: z.ZodUnion<[z.ZodArray<z.ZodNumber, "many">, z.ZodString]>;
    index: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    object: string;
    index: number;
    embedding: (string | number[]) & (string | number[] | undefined);
}, {
    embedding: (string | number[]) & (string | number[] | undefined);
    object?: string | undefined;
    index?: number | undefined;
}>;
export declare const EmbeddingResponseSchema: z.ZodObject<{
    object: z.ZodDefault<z.ZodString>;
    data: z.ZodArray<z.ZodObject<{
        object: z.ZodDefault<z.ZodString>;
        embedding: z.ZodUnion<[z.ZodArray<z.ZodNumber, "many">, z.ZodString]>;
        index: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        object: string;
        index: number;
        embedding: (string | number[]) & (string | number[] | undefined);
    }, {
        embedding: (string | number[]) & (string | number[] | undefined);
        object?: string | undefined;
        index?: number | undefined;
    }>, "many">;
    model: z.ZodString;
    usage: z.ZodDefault<z.ZodObject<{
        prompt_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        completion_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        total_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    }, {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    object: string;
    data: {
        object: string;
        index: number;
        embedding: (string | number[]) & (string | number[] | undefined);
    }[];
    model: string;
    usage: {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    };
}, {
    data: {
        embedding: (string | number[]) & (string | number[] | undefined);
        object?: string | undefined;
        index?: number | undefined;
    }[];
    model: string;
    object?: string | undefined;
    usage?: {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    } | undefined;
}>;
export type EmbeddingRequest = z.infer<typeof EmbeddingRequestSchema>;
export type EmbeddingResponse = z.infer<typeof EmbeddingResponseSchema>;
