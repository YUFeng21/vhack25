import { z } from "zod";
/**
 * Represents who said a chat message.
 */
declare const ChatRoleSchema: z.ZodEnum<["system", "user", "assistant", "function"]>;
export declare const ChatEntrySchema: z.ZodObject<{
    role: z.ZodEnum<["system", "user", "assistant", "function"]>;
    content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
    name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    role: "function" | "system" | "user" | "assistant";
    content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
    name?: string | null | undefined;
}, {
    role: "function" | "system" | "user" | "assistant";
    content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
    name?: string | null | undefined;
}>;
export declare const RAGParamsSchema: z.ZodObject<{
    search_query: z.ZodOptional<z.ZodString>;
    k: z.ZodOptional<z.ZodNumber>;
    fetch_k: z.ZodOptional<z.ZodNumber>;
    document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
    rerank: z.ZodOptional<z.ZodBoolean>;
    concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    search_query?: string | undefined;
    k?: number | undefined;
    fetch_k?: number | undefined;
    document_ids?: string[] | undefined;
    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
    rerank?: boolean | undefined;
    concat_reranker_input?: boolean | undefined;
}, {
    search_query?: string | undefined;
    k?: number | undefined;
    fetch_k?: number | undefined;
    document_ids?: string[] | undefined;
    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
    rerank?: boolean | undefined;
    concat_reranker_input?: boolean | undefined;
}>;
declare const FunctionSpecSchema: z.ZodObject<{
    name: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    name: string;
    parameters: Record<string, any>;
    description?: string | undefined;
}, {
    name: string;
    parameters: Record<string, any>;
    description?: string | undefined;
}>;
declare const ToolSpecSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodString>;
    function: z.ZodObject<{
        name: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        parameters: Record<string, any>;
        description?: string | undefined;
    }, {
        name: string;
        parameters: Record<string, any>;
        description?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    function: {
        name: string;
        parameters: Record<string, any>;
        description?: string | undefined;
    };
    type?: string | undefined;
}, {
    function: {
        name: string;
        parameters: Record<string, any>;
        description?: string | undefined;
    };
    type?: string | undefined;
}>;
declare const FunctionChoiceSpecSchema: z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
export declare const ChatCompletionUsageSchema: z.ZodObject<{
    prompt_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    completion_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    total_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
}, "strip", z.ZodTypeAny, {
    prompt_tokens: number | null;
    completion_tokens: number | null;
    total_tokens: number | null;
}, {
    prompt_tokens?: number | null | undefined;
    completion_tokens?: number | null | undefined;
    total_tokens?: number | null | undefined;
}>;
/**
 * Represents a message in the chat context.
 */
export declare const ChatRequestSchema: z.ZodObject<{
    id: z.ZodDefault<z.ZodString>;
    model: z.ZodDefault<z.ZodString>;
    messages: z.ZodArray<z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant", "function"]>;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }>, "many">;
    rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
        search_query: z.ZodOptional<z.ZodString>;
        k: z.ZodOptional<z.ZodNumber>;
        fetch_k: z.ZodOptional<z.ZodNumber>;
        document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
        rerank: z.ZodOptional<z.ZodBoolean>;
        concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    }, {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    }>>>;
    temperature: z.ZodDefault<z.ZodNumber>;
    top_p: z.ZodDefault<z.ZodNumber>;
    n: z.ZodDefault<z.ZodNumber>;
    stream: z.ZodDefault<z.ZodBoolean>;
    stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    max_tokens: z.ZodDefault<z.ZodNumber>;
    presence_penalty: z.ZodDefault<z.ZodNumber>;
    frequency_penalty: z.ZodDefault<z.ZodNumber>;
    logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
    user: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    stream: boolean;
    user: string;
    id: string;
    model: string;
    messages: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }[];
    rag_params: {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    } | null;
    temperature: number;
    top_p: number;
    n: number;
    stop: string[] | null;
    max_tokens: number;
    presence_penalty: number;
    frequency_penalty: number;
    logit_bias: Record<string, any>;
}, {
    messages: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }[];
    id?: string | undefined;
    model?: string | undefined;
    rag_params?: {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    } | null | undefined;
    temperature?: number | undefined;
    top_p?: number | undefined;
    n?: number | undefined;
    stream?: boolean | undefined;
    stop?: string[] | null | undefined;
    max_tokens?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    logit_bias?: Record<string, any> | undefined;
    user?: string | undefined;
}>;
export declare const ChatCompletionChoiceSchema: z.ZodObject<{
    message: z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant", "function"]>;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }>;
    index: z.ZodNumber;
    finish_reason: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    };
    index: number;
    finish_reason: string | null;
}, {
    message: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    };
    index: number;
    finish_reason: string | null;
}>;
export declare const ChatCompletionChoiceDeltaSchema: z.ZodObject<{
    message: z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant", "function"]>;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }>;
    index: z.ZodNumber;
    finish_reason: z.ZodNullable<z.ZodString>;
    delta: z.ZodNullable<z.ZodObject<{
        role: z.ZodEnum<["system", "user", "assistant", "function"]>;
        content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
        name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }, {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    message: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    };
    index: number;
    finish_reason: string | null;
    delta: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    } | null;
}, {
    message: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    };
    index: number;
    finish_reason: string | null;
    delta: {
        role: "function" | "system" | "user" | "assistant";
        content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
        name?: string | null | undefined;
    } | null;
}>;
export declare const ChunkSchema: z.ZodObject<{
    text: z.ZodString;
    title: z.ZodString;
    page: z.ZodNumber;
    file_name: z.ZodString;
    file_path: z.ZodString;
    document_id: z.ZodString;
    chunk_id: z.ZodString;
    metadata: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    file_path: string;
    text: string;
    title: string;
    page: number;
    file_name: string;
    document_id: string;
    chunk_id: string;
    metadata: Record<string, any>;
}, {
    file_path: string;
    text: string;
    title: string;
    page: number;
    file_name: string;
    document_id: string;
    chunk_id: string;
    metadata: Record<string, any>;
}>;
export declare const ReferencesSchema: z.ZodObject<{
    object: z.ZodEnum<["chat.references"]>;
    chunks: z.ZodArray<z.ZodObject<{
        text: z.ZodString;
        title: z.ZodString;
        page: z.ZodNumber;
        file_name: z.ZodString;
        file_path: z.ZodString;
        document_id: z.ZodString;
        chunk_id: z.ZodString;
        metadata: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        file_path: string;
        text: string;
        title: string;
        page: number;
        file_name: string;
        document_id: string;
        chunk_id: string;
        metadata: Record<string, any>;
    }, {
        file_path: string;
        text: string;
        title: string;
        page: number;
        file_name: string;
        document_id: string;
        chunk_id: string;
        metadata: Record<string, any>;
    }>, "many">;
    search_query: z.ZodString;
    finish_reason: z.ZodNullable<z.ZodEnum<["stop", "context_overflow"]>>;
}, "strip", z.ZodTypeAny, {
    object: "chat.references";
    search_query: string;
    finish_reason: "stop" | "context_overflow" | null;
    chunks: {
        file_path: string;
        text: string;
        title: string;
        page: number;
        file_name: string;
        document_id: string;
        chunk_id: string;
        metadata: Record<string, any>;
    }[];
}, {
    object: "chat.references";
    search_query: string;
    finish_reason: "stop" | "context_overflow" | null;
    chunks: {
        file_path: string;
        text: string;
        title: string;
        page: number;
        file_name: string;
        document_id: string;
        chunk_id: string;
        metadata: Record<string, any>;
    }[];
}>;
export declare const ChatCompletionChunkSchema: z.ZodObject<{
    id: z.ZodString;
    object: z.ZodEnum<["chat.completion"]>;
    created: z.ZodNumber;
    model: z.ZodString;
    usage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        completion_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        total_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    }, {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    }>>>;
    choices: z.ZodUnion<[z.ZodArray<z.ZodObject<{
        message: z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }>;
        index: z.ZodNumber;
        finish_reason: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }>, "many">, z.ZodArray<z.ZodObject<{
        message: z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }>;
        index: z.ZodNumber;
        finish_reason: z.ZodNullable<z.ZodString>;
        delta: z.ZodNullable<z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }>, "many">]>;
    references: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object: z.ZodEnum<["chat.references"]>;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            title: z.ZodString;
            page: z.ZodNumber;
            file_name: z.ZodString;
            file_path: z.ZodString;
            document_id: z.ZodString;
            chunk_id: z.ZodString;
            metadata: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }, {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }>, "many">;
        search_query: z.ZodString;
        finish_reason: z.ZodNullable<z.ZodEnum<["stop", "context_overflow"]>>;
    }, "strip", z.ZodTypeAny, {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    }, {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    }>>>;
}, "strip", z.ZodTypeAny, {
    object: "chat.completion";
    id: string;
    model: string;
    created: number;
    choices: ({
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }[] | {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[]) & ({
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }[] | {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[] | undefined);
    usage?: {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    } | null | undefined;
    references?: {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    } | null | undefined;
}, {
    object: "chat.completion";
    id: string;
    model: string;
    created: number;
    choices: ({
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }[] | {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[]) & ({
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
    }[] | {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[] | undefined);
    usage?: {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    } | null | undefined;
    references?: {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    } | null | undefined;
}>;
export declare const StreamChatCompletionChunkSchema: z.ZodObject<{
    id: z.ZodString;
    object: z.ZodEnum<["chat.completion.chunk"]>;
    created: z.ZodNumber;
    model: z.ZodString;
    usage: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        prompt_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        completion_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
        total_tokens: z.ZodDefault<z.ZodOptional<z.ZodNullable<z.ZodNumber>>>;
    }, "strip", z.ZodTypeAny, {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    }, {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    }>>>;
    choices: z.ZodArray<z.ZodObject<{
        message: z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }>;
        index: z.ZodNumber;
        finish_reason: z.ZodNullable<z.ZodString>;
        delta: z.ZodNullable<z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>, "many">]>;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }, {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }>, "many">;
    references: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        object: z.ZodEnum<["chat.references"]>;
        chunks: z.ZodArray<z.ZodObject<{
            text: z.ZodString;
            title: z.ZodString;
            page: z.ZodNumber;
            file_name: z.ZodString;
            file_path: z.ZodString;
            document_id: z.ZodString;
            chunk_id: z.ZodString;
            metadata: z.ZodRecord<z.ZodString, z.ZodAny>;
        }, "strip", z.ZodTypeAny, {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }, {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }>, "many">;
        search_query: z.ZodString;
        finish_reason: z.ZodNullable<z.ZodEnum<["stop", "context_overflow"]>>;
    }, "strip", z.ZodTypeAny, {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    }, {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    }>>>;
}, "strip", z.ZodTypeAny, {
    object: "chat.completion.chunk";
    id: string;
    model: string;
    created: number;
    choices: {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[];
    usage?: {
        prompt_tokens: number | null;
        completion_tokens: number | null;
        total_tokens: number | null;
    } | null | undefined;
    references?: {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    } | null | undefined;
}, {
    object: "chat.completion.chunk";
    id: string;
    model: string;
    created: number;
    choices: {
        message: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        };
        index: number;
        finish_reason: string | null;
        delta: {
            role: "function" | "system" | "user" | "assistant";
            content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
            name?: string | null | undefined;
        } | null;
    }[];
    usage?: {
        prompt_tokens?: number | null | undefined;
        completion_tokens?: number | null | undefined;
        total_tokens?: number | null | undefined;
    } | null | undefined;
    references?: {
        object: "chat.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
    } | null | undefined;
}>;
export type ChatRole = z.infer<typeof ChatRoleSchema>;
export type ChatEntry = z.infer<typeof ChatEntrySchema>;
export type RAGParams = z.infer<typeof RAGParamsSchema>;
export type FunctionSpec = z.infer<typeof FunctionSpecSchema>;
export type ToolSpec = z.infer<typeof ToolSpecSchema>;
export type FunctionChoiceSpec = z.infer<typeof FunctionChoiceSpecSchema>;
export type ChatCompletionUsage = z.infer<typeof ChatCompletionUsageSchema>;
export type ChatRequest = z.input<typeof ChatRequestSchema>;
export type Chunk = z.infer<typeof ChunkSchema>;
export type References = z.infer<typeof ReferencesSchema>;
export type ChatCompletionChoice = z.infer<typeof ChatCompletionChoiceSchema>;
export type ChatCompletionChoiceDelta = z.infer<typeof ChatCompletionChoiceDeltaSchema>;
export type ChatCompletionChunk = z.infer<typeof ChatCompletionChunkSchema>;
export type StreamChatCompletionChunk = z.infer<typeof StreamChatCompletionChunkSchema>;
export {};
