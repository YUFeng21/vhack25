import { Base } from "../../resources/base";
import { AddActionColumnRequest, CreateActionTableRequest } from "../../resources/gen_tables/action";
import { CreateChatTableRequest, GenTableRowsChatCompletionChunks, GenTableStreamChatCompletionChunk, GenTableStreamReferences, GetConversationThreadRequest, GetConversationThreadResponse } from "../../resources/gen_tables/chat";
import { CreateKnowledgeTableRequest, UploadFileRequest } from "../../resources/gen_tables/knowledge";
import { AddColumnRequest, AddRowRequest, DeleteRowRequest, DeleteRowsRequest, DeleteTableRequest, DropColumnsRequest, DuplicateTableRequest, ExportTableRequest, GetRowRequest, GetRowResponse, HybridSearchRequest, HybridSearchResponse, ImportTableRequest, ListTableRequest, ListTableRowsRequest, OkResponse, PageListTableMetaResponse, PageListTableRowsResponse, RegenRowRequest, RenameColumnsRequest, RenameTableRequest, ReorderColumnsRequest, TableMetaRequest, TableMetaResponse, UpdateGenConfigRequest, UpdateRowRequest } from "../../resources/gen_tables/tables";
export declare class GenTable extends Base {
    private handleGenTableStreamResponse;
    listTables(params: ListTableRequest): Promise<PageListTableMetaResponse>;
    getTable(params: TableMetaRequest): Promise<TableMetaResponse>;
    listRows(params: ListTableRowsRequest): Promise<PageListTableRowsResponse>;
    getRow(params: GetRowRequest): Promise<GetRowResponse>;
    getConversationThread(params: GetConversationThreadRequest): Promise<GetConversationThreadResponse>;
    createActionTable(params: CreateActionTableRequest): Promise<TableMetaResponse>;
    createChatTable(params: CreateChatTableRequest): Promise<TableMetaResponse>;
    createKnowledgeTable(params: CreateKnowledgeTableRequest): Promise<TableMetaResponse>;
    deleteTable(params: DeleteTableRequest): Promise<OkResponse>;
    deleteRow(params: DeleteRowRequest): Promise<OkResponse>;
    /**
     * @param {string} [params.where] - Optional. SQL where clause. If not provided, will match all rows and thus deleting all table content.
     */
    deleteRows(params: DeleteRowsRequest): Promise<OkResponse>;
    renameTable(params: RenameTableRequest): Promise<TableMetaResponse>;
    duplicateTable(params: DuplicateTableRequest): Promise<TableMetaResponse>;
    renameColumns(params: RenameColumnsRequest): Promise<TableMetaResponse>;
    reorderColumns(params: ReorderColumnsRequest): Promise<TableMetaResponse>;
    dropColumns(params: DropColumnsRequest): Promise<TableMetaResponse>;
    addActionColumns(params: AddActionColumnRequest): Promise<TableMetaResponse>;
    addKnowledgeColumns(params: AddColumnRequest): Promise<TableMetaResponse>;
    addChatColumns(params: AddColumnRequest): Promise<TableMetaResponse>;
    updateGenConfig(params: UpdateGenConfigRequest): Promise<TableMetaResponse>;
    addRowStream(params: AddRowRequest): Promise<ReadableStream<GenTableStreamChatCompletionChunk | GenTableStreamReferences>>;
    addRow(params: AddRowRequest): Promise<GenTableRowsChatCompletionChunks>;
    regenRowStream(params: RegenRowRequest): Promise<ReadableStream<{
        object: "gen_table.completion.chunk";
        id: string;
        model: string;
        created: number;
        choices: ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            } | null;
        }[]) & ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: (string | Record<string, string | Record<string, string>>[]) & (string | Record<string, string | Record<string, string>>[] | undefined);
                name?: string | null | undefined;
            } | null;
        }[] | undefined);
        row_id: string;
        output_column_name: string;
        usage?: {
            prompt_tokens: number | null;
            completion_tokens: number | null;
            total_tokens: number | null;
        } | null | undefined;
        references?: {
            object: "chat.references";
            search_query: string;
            finish_reason: "stop" | "context_overflow" | null;
            chunks: {
                file_path: string;
                text: string;
                title: string;
                page: number;
                file_name: string;
                document_id: string;
                chunk_id: string;
                metadata: Record<string, any>;
            }[];
        } | null | undefined;
    } | {
        object: "gen_table.references";
        search_query: string;
        finish_reason: "stop" | "context_overflow" | null;
        chunks: {
            file_path: string;
            text: string;
            title: string;
            page: number;
            file_name: string;
            document_id: string;
            chunk_id: string;
            metadata: Record<string, any>;
        }[];
        output_column_name: string;
    }>>;
    regenRow(params: RegenRowRequest): Promise<GenTableRowsChatCompletionChunks>;
    updateRow(params: UpdateRowRequest): Promise<OkResponse>;
    hybridSearch(params: HybridSearchRequest): Promise<HybridSearchResponse>;
    /**
     * @deprecated This method will be removed in future versions.
     * Use the embedFile method instead.
     */
    uploadFile(params: UploadFileRequest): Promise<OkResponse>;
    embedFile(params: UploadFileRequest): Promise<OkResponse>;
    importTableData(params: ImportTableRequest): Promise<GenTableRowsChatCompletionChunks>;
    importTableDataStream(params: ImportTableRequest): Promise<ReadableStream<GenTableStreamChatCompletionChunk | GenTableStreamReferences>>;
    exportTableData(params: ExportTableRequest): Promise<Uint8Array>;
}
