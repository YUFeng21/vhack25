import { z } from "zod";
export declare const GenTableOrderBy: Readonly<{
    ID: "id";
    UPDATED_AT: "updated_at";
}>;
export declare const QueryRequestParams: z.ZodObject<{
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    offset: number;
    limit: number;
}, {
    offset?: number | undefined;
    limit?: number | undefined;
}>;
export declare const TableTypesSchema: z.ZodEnum<["action", "knowledge", "chat"]>;
export declare const IdSchema: z.ZodString;
export declare const TableIdSchema: z.ZodString;
declare const DtypeEnumSchema: z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "image", "bytes", "audio"]>;
export declare const EmbedGenConfigSchema: z.ZodObject<{
    object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
    embedding_model: z.ZodString;
    source_column: z.ZodString;
}, "strip", z.ZodTypeAny, {
    object: "gen_config.embed";
    embedding_model: string;
    source_column: string;
}, {
    embedding_model: string;
    source_column: string;
    object?: "gen_config.embed" | undefined;
}>;
export declare const LLMGenConfigSchema: z.ZodObject<{
    object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
    model: z.ZodDefault<z.ZodString>;
    prompt: z.ZodDefault<z.ZodString>;
    system_prompt: z.ZodDefault<z.ZodString>;
    multi_turn: z.ZodDefault<z.ZodBoolean>;
    rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
        search_query: z.ZodOptional<z.ZodString>;
        k: z.ZodOptional<z.ZodNumber>;
        fetch_k: z.ZodOptional<z.ZodNumber>;
        document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
        rerank: z.ZodOptional<z.ZodBoolean>;
        concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    }, {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    }>>>;
    temperature: z.ZodDefault<z.ZodNumber>;
    top_p: z.ZodDefault<z.ZodNumber>;
    stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    max_tokens: z.ZodDefault<z.ZodNumber>;
    presence_penalty: z.ZodDefault<z.ZodNumber>;
    frequency_penalty: z.ZodDefault<z.ZodNumber>;
    logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    object: "gen_config.llm";
    model: string;
    rag_params: {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    } | null;
    temperature: number;
    top_p: number;
    stop: string[] | null;
    max_tokens: number;
    presence_penalty: number;
    frequency_penalty: number;
    logit_bias: Record<string, any>;
    prompt: string;
    system_prompt: string;
    multi_turn: boolean;
}, {
    object?: "gen_config.llm" | undefined;
    model?: string | undefined;
    prompt?: string | undefined;
    system_prompt?: string | undefined;
    multi_turn?: boolean | undefined;
    rag_params?: {
        search_query?: string | undefined;
        k?: number | undefined;
        fetch_k?: number | undefined;
        document_ids?: string[] | undefined;
        rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
        rerank?: boolean | undefined;
        concat_reranker_input?: boolean | undefined;
    } | null | undefined;
    temperature?: number | undefined;
    top_p?: number | undefined;
    stop?: string[] | null | undefined;
    max_tokens?: number | undefined;
    presence_penalty?: number | undefined;
    frequency_penalty?: number | undefined;
    logit_bias?: Record<string, any> | undefined;
}>;
export declare const CodeGenConfigSchema: z.ZodObject<{
    object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
    source_column: z.ZodString;
}, "strip", z.ZodTypeAny, {
    object: "gen_config.code";
    source_column: string;
}, {
    source_column: string;
    object?: "gen_config.code" | undefined;
}>;
export declare const ColumnSchemaSchema: z.ZodObject<{
    id: z.ZodString;
    dtype: z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "image", "bytes", "audio"]>>;
    vlen: z.ZodDefault<z.ZodNumber>;
    index: z.ZodDefault<z.ZodBoolean>;
    gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
        model: z.ZodDefault<z.ZodString>;
        prompt: z.ZodDefault<z.ZodString>;
        system_prompt: z.ZodDefault<z.ZodString>;
        multi_turn: z.ZodDefault<z.ZodBoolean>;
        rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
            search_query: z.ZodOptional<z.ZodString>;
            k: z.ZodOptional<z.ZodNumber>;
            fetch_k: z.ZodOptional<z.ZodNumber>;
            document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
            rerank: z.ZodOptional<z.ZodBoolean>;
            concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }>>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        top_p: z.ZodDefault<z.ZodNumber>;
        stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        max_tokens: z.ZodDefault<z.ZodNumber>;
        presence_penalty: z.ZodDefault<z.ZodNumber>;
        frequency_penalty: z.ZodDefault<z.ZodNumber>;
        logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    }, {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
        embedding_model: z.ZodString;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    }, {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.code";
        source_column: string;
    }, {
        source_column: string;
        object?: "gen_config.code" | undefined;
    }>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    index: boolean;
    dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
    vlen: number;
    gen_config?: {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    } | {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    } | {
        object: "gen_config.code";
        source_column: string;
    } | null | undefined;
}, {
    id: string;
    dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
    vlen?: number | undefined;
    index?: boolean | undefined;
    gen_config?: {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    } | {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    } | {
        source_column: string;
        object?: "gen_config.code" | undefined;
    } | null | undefined;
}>;
export declare const ColumnSchemaCreateSchema: z.ZodObject<{
    index: z.ZodDefault<z.ZodBoolean>;
    vlen: z.ZodDefault<z.ZodNumber>;
    gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
        model: z.ZodDefault<z.ZodString>;
        prompt: z.ZodDefault<z.ZodString>;
        system_prompt: z.ZodDefault<z.ZodString>;
        multi_turn: z.ZodDefault<z.ZodBoolean>;
        rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
            search_query: z.ZodOptional<z.ZodString>;
            k: z.ZodOptional<z.ZodNumber>;
            fetch_k: z.ZodOptional<z.ZodNumber>;
            document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
            rerank: z.ZodOptional<z.ZodBoolean>;
            concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }>>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        top_p: z.ZodDefault<z.ZodNumber>;
        stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        max_tokens: z.ZodDefault<z.ZodNumber>;
        presence_penalty: z.ZodDefault<z.ZodNumber>;
        frequency_penalty: z.ZodDefault<z.ZodNumber>;
        logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    }, {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
        embedding_model: z.ZodString;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    }, {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.code";
        source_column: string;
    }, {
        source_column: string;
        object?: "gen_config.code" | undefined;
    }>, z.ZodNull]>>;
    id: z.ZodString;
    dtype: z.ZodDefault<z.ZodEnum<["int", "float", "str", "bool", "image", "audio"]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    index: boolean;
    dtype: "float" | "int" | "str" | "bool" | "image" | "audio";
    vlen: number;
    gen_config?: {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    } | {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    } | {
        object: "gen_config.code";
        source_column: string;
    } | null | undefined;
}, {
    id: string;
    index?: boolean | undefined;
    vlen?: number | undefined;
    gen_config?: {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    } | {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    } | {
        source_column: string;
        object?: "gen_config.code" | undefined;
    } | null | undefined;
    dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | undefined;
}>;
export declare const TableSchemaCreateSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        index: z.ZodDefault<z.ZodBoolean>;
        vlen: z.ZodDefault<z.ZodNumber>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
            model: z.ZodDefault<z.ZodString>;
            prompt: z.ZodDefault<z.ZodString>;
            system_prompt: z.ZodDefault<z.ZodString>;
            multi_turn: z.ZodDefault<z.ZodBoolean>;
            rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            top_p: z.ZodDefault<z.ZodNumber>;
            stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodDefault<z.ZodNumber>;
            presence_penalty: z.ZodDefault<z.ZodNumber>;
            frequency_penalty: z.ZodDefault<z.ZodNumber>;
            logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        }, {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
            embedding_model: z.ZodString;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        }, {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.code";
            source_column: string;
        }, {
            source_column: string;
            object?: "gen_config.code" | undefined;
        }>, z.ZodNull]>>;
        id: z.ZodString;
        dtype: z.ZodDefault<z.ZodEnum<["int", "float", "str", "bool", "image", "audio"]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }, {
        id: string;
        index?: boolean | undefined;
        vlen?: number | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }[];
}, {
    id: string;
    cols: {
        id: string;
        index?: boolean | undefined;
        vlen?: number | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | undefined;
    }[];
}>;
export declare let ListTableRequestSchema: z.ZodObject<{
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    parent_id: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>;
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    search_query: z.ZodDefault<z.ZodString>;
    order_by: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    order_descending: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    count_rows: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    offset: number;
    limit: number;
    search_query: string;
    table_type: "action" | "knowledge" | "chat";
    order_by: string;
    order_descending: boolean;
    count_rows: boolean;
    parent_id?: string | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    offset?: number | undefined;
    limit?: number | undefined;
    parent_id?: string | null | undefined;
    search_query?: string | undefined;
    order_by?: string | undefined;
    order_descending?: boolean | undefined;
    count_rows?: boolean | undefined;
}>;
export declare const TableMetaResponseSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "image", "bytes", "audio"]>>;
        vlen: z.ZodDefault<z.ZodNumber>;
        index: z.ZodDefault<z.ZodBoolean>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
            model: z.ZodDefault<z.ZodString>;
            prompt: z.ZodDefault<z.ZodString>;
            system_prompt: z.ZodDefault<z.ZodString>;
            multi_turn: z.ZodDefault<z.ZodBoolean>;
            rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            top_p: z.ZodDefault<z.ZodNumber>;
            stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodDefault<z.ZodNumber>;
            presence_penalty: z.ZodDefault<z.ZodNumber>;
            frequency_penalty: z.ZodDefault<z.ZodNumber>;
            logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        }, {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
            embedding_model: z.ZodString;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        }, {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.code";
            source_column: string;
        }, {
            source_column: string;
            object?: "gen_config.code" | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }>, "many">;
    parent_id: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    title: z.ZodString;
    lock_till: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    updated_at: z.ZodString;
    indexed_at_fts: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_vec: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_sca: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    num_rows: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    title: string;
    updated_at: string;
    cols: {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }[];
    parent_id: string | null;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}, {
    id: string;
    title: string;
    updated_at: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }[];
    parent_id: string | null;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}>;
export declare const TableMetaRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
}>;
export declare const ListTableRowsRequestSchema: z.ZodObject<{
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    columns: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    search_query: z.ZodDefault<z.ZodString>;
    float_decimals: z.ZodDefault<z.ZodNumber>;
    vec_decimals: z.ZodDefault<z.ZodNumber>;
    order_descending: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    offset: number;
    limit: number;
    search_query: string;
    table_type: "action" | "knowledge" | "chat";
    order_descending: boolean;
    table_id: string;
    float_decimals: number;
    vec_decimals: number;
    columns?: string[] | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    offset?: number | undefined;
    limit?: number | undefined;
    columns?: string[] | null | undefined;
    search_query?: string | undefined;
    float_decimals?: number | undefined;
    vec_decimals?: number | undefined;
    order_descending?: boolean | undefined;
}>;
export declare const ListTableRowsResponseSchema: z.ZodRecord<z.ZodString, z.ZodAny>;
export declare const GetRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
    columns: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    float_decimals: z.ZodDefault<z.ZodNumber>;
    vec_decimals: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    float_decimals: number;
    vec_decimals: number;
    row_id: string;
    columns?: string[] | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_id: string;
    columns?: string[] | null | undefined;
    float_decimals?: number | undefined;
    vec_decimals?: number | undefined;
}>;
export declare const GetRowResponseSchema: z.ZodRecord<z.ZodString, z.ZodAny>;
export declare const PageListTableRowsResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<Record<string, any>, z.ZodTypeDef, Record<string, any>>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    items: Record<string, any>[];
    offset: number;
    limit: number;
    total: number;
}, {
    items?: Record<string, any>[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const PageListTableMetaResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<{
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }, z.ZodTypeDef, {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    items: {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[];
    offset: number;
    limit: number;
    total: number;
}, {
    items?: {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const OkResponseSchema: z.ZodObject<{
    ok: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    ok: boolean;
}, {
    ok?: boolean | undefined;
}>;
export declare const DeleteTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
}>;
export declare const RenameTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id_src: z.ZodString;
    table_id_dst: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}>;
export declare const DuplicateTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id_src: z.ZodString;
    table_id_dst: z.ZodDefault<z.ZodNullable<z.ZodString>>;
    include_data: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    create_as_child: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string | null;
    include_data: boolean;
    create_as_child: boolean;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst?: string | null | undefined;
    include_data?: boolean | undefined;
    create_as_child?: boolean | undefined;
}>;
export declare const CreateChildTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id_src: z.ZodString;
    table_id_dst: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}>;
export declare const RenameColumnsRequestScheme: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_map: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_map: Record<string, string>;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_map: Record<string, string>;
}>;
export declare const ReorderColumnsRequestScheme: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_names: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_names: string[];
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_names: string[];
}>;
export declare const AddColumnRequestSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        index: z.ZodDefault<z.ZodBoolean>;
        vlen: z.ZodDefault<z.ZodNumber>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
            model: z.ZodDefault<z.ZodString>;
            prompt: z.ZodDefault<z.ZodString>;
            system_prompt: z.ZodDefault<z.ZodString>;
            multi_turn: z.ZodDefault<z.ZodBoolean>;
            rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            top_p: z.ZodDefault<z.ZodNumber>;
            stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodDefault<z.ZodNumber>;
            presence_penalty: z.ZodDefault<z.ZodNumber>;
            frequency_penalty: z.ZodDefault<z.ZodNumber>;
            logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        }, {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
            embedding_model: z.ZodString;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        }, {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.code";
            source_column: string;
        }, {
            source_column: string;
            object?: "gen_config.code" | undefined;
        }>, z.ZodNull]>>;
        id: z.ZodString;
        dtype: z.ZodDefault<z.ZodEnum<["int", "float", "str", "bool", "image", "audio"]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }, {
        id: string;
        index?: boolean | undefined;
        vlen?: number | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }[];
}, {
    id: string;
    cols: {
        id: string;
        index?: boolean | undefined;
        vlen?: number | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | undefined;
    }[];
}>;
export declare const UpdateGenConfigRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_map: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
        model: z.ZodDefault<z.ZodString>;
        prompt: z.ZodDefault<z.ZodString>;
        system_prompt: z.ZodDefault<z.ZodString>;
        multi_turn: z.ZodDefault<z.ZodBoolean>;
        rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
            search_query: z.ZodOptional<z.ZodString>;
            k: z.ZodOptional<z.ZodNumber>;
            fetch_k: z.ZodOptional<z.ZodNumber>;
            document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
            rerank: z.ZodOptional<z.ZodBoolean>;
            concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }>>>;
        temperature: z.ZodDefault<z.ZodNumber>;
        top_p: z.ZodDefault<z.ZodNumber>;
        stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        max_tokens: z.ZodDefault<z.ZodNumber>;
        presence_penalty: z.ZodDefault<z.ZodNumber>;
        frequency_penalty: z.ZodDefault<z.ZodNumber>;
        logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    }, {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
        embedding_model: z.ZodString;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    }, {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    }>, z.ZodObject<{
        object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
        source_column: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        object: "gen_config.code";
        source_column: string;
    }, {
        source_column: string;
        object?: "gen_config.code" | undefined;
    }>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_map: Record<string, {
        object: "gen_config.embed";
        embedding_model: string;
        source_column: string;
    } | {
        object: "gen_config.llm";
        model: string;
        rag_params: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null;
        temperature: number;
        top_p: number;
        stop: string[] | null;
        max_tokens: number;
        presence_penalty: number;
        frequency_penalty: number;
        logit_bias: Record<string, any>;
        prompt: string;
        system_prompt: string;
        multi_turn: boolean;
    } | {
        object: "gen_config.code";
        source_column: string;
    } | null>;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    column_map: Record<string, {
        embedding_model: string;
        source_column: string;
        object?: "gen_config.embed" | undefined;
    } | {
        object?: "gen_config.llm" | undefined;
        model?: string | undefined;
        prompt?: string | undefined;
        system_prompt?: string | undefined;
        multi_turn?: boolean | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        stop?: string[] | null | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
    } | {
        source_column: string;
        object?: "gen_config.code" | undefined;
    } | null>;
}>;
export declare const DeleteRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
    reindex: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_id: string;
    reindex: boolean;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_id: string;
    reindex?: boolean | undefined;
}>;
export declare const AddRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    reindex: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
    table_id: z.ZodString;
    data: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>, "many">;
    concurrent: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    data: Record<string, any>[];
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    reindex: boolean | null;
    concurrent: boolean;
}, {
    data: Record<string, any>[];
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    reindex?: boolean | null | undefined;
    concurrent?: boolean | undefined;
}>;
export declare const RegenRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_ids: z.ZodArray<z.ZodString, "many">;
    reindex: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
    concurrent: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    reindex: boolean | null;
    concurrent: boolean;
    row_ids: string[];
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_ids: string[];
    reindex?: boolean | null | undefined;
    concurrent?: boolean | undefined;
}>;
export declare const UpdateRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
    data: z.ZodRecord<z.ZodString, z.ZodAny>;
    reindex: z.ZodDefault<z.ZodNullable<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    data: Record<string, any>;
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_id: string;
    reindex: boolean | null;
}, {
    data: Record<string, any>;
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    row_id: string;
    reindex?: boolean | null | undefined;
}>;
export declare const DeleteRowsRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    where: z.ZodOptional<z.ZodString>;
    reindex: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    reindex: boolean;
    where?: string | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    where?: string | undefined;
    reindex?: boolean | undefined;
}>;
export declare const HybridSearchRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    query: z.ZodString;
    where: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
    limit: z.ZodOptional<z.ZodNumber>;
    metric: z.ZodOptional<z.ZodString>;
    nprobes: z.ZodOptional<z.ZodNumber>;
    refine_factor: z.ZodOptional<z.ZodNumber>;
    reranking_model: z.ZodOptional<z.ZodDefault<z.ZodNullable<z.ZodString>>>;
    float_decimals: z.ZodDefault<z.ZodNumber>;
    vec_decimals: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    float_decimals: number;
    vec_decimals: number;
    query: string;
    where?: string | null | undefined;
    limit?: number | undefined;
    metric?: string | undefined;
    nprobes?: number | undefined;
    refine_factor?: number | undefined;
    reranking_model?: string | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    query: string;
    where?: string | null | undefined;
    limit?: number | undefined;
    metric?: string | undefined;
    nprobes?: number | undefined;
    refine_factor?: number | undefined;
    reranking_model?: string | null | undefined;
    float_decimals?: number | undefined;
    vec_decimals?: number | undefined;
}>;
export declare const HybridSearchResponseSchema: z.ZodArray<z.ZodRecord<z.ZodString, z.ZodAny>, "many">;
export declare const CreateTableRequestSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "image", "bytes", "audio"]>>;
        vlen: z.ZodDefault<z.ZodNumber>;
        index: z.ZodDefault<z.ZodBoolean>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
            model: z.ZodDefault<z.ZodString>;
            prompt: z.ZodDefault<z.ZodString>;
            system_prompt: z.ZodDefault<z.ZodString>;
            multi_turn: z.ZodDefault<z.ZodBoolean>;
            rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            top_p: z.ZodDefault<z.ZodNumber>;
            stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodDefault<z.ZodNumber>;
            presence_penalty: z.ZodDefault<z.ZodNumber>;
            frequency_penalty: z.ZodDefault<z.ZodNumber>;
            logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        }, {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
            embedding_model: z.ZodString;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        }, {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.code";
            source_column: string;
        }, {
            source_column: string;
            object?: "gen_config.code" | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }[];
}, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }[];
}>;
export declare const ImportTableRequestSchema: z.ZodObject<{
    file_path: z.ZodOptional<z.ZodString>;
    file: z.ZodOptional<z.ZodAny>;
    table_id: z.ZodString;
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    delimiter: z.ZodOptional<z.ZodDefault<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    file_path?: string | undefined;
    file?: any;
    delimiter?: string | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    file_path?: string | undefined;
    file?: any;
    delimiter?: string | undefined;
}>;
export declare const ExportTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    delimiter: z.ZodDefault<z.ZodString>;
    columns: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    delimiter: string;
    columns?: string[] | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    delimiter?: string | undefined;
    columns?: string[] | null | undefined;
}>;
export type TableTypes = z.infer<typeof TableTypesSchema>;
export type ListTableRowsRequest = z.input<typeof ListTableRowsRequestSchema>;
export type ListTableRowsResponse = z.infer<typeof ListTableRowsResponseSchema>;
export type DtypeEnum = z.infer<typeof DtypeEnumSchema>;
export type ColumnSchema = z.input<typeof ColumnSchemaSchema>;
export type ColumnSchemaCreate = z.input<typeof ColumnSchemaCreateSchema>;
export type ListTableRequest = z.input<typeof ListTableRequestSchema>;
export type PageListTableRowsResponse = z.infer<typeof PageListTableRowsResponseSchema>;
export type PageListTableMetaResponse = z.infer<typeof PageListTableMetaResponseSchema>;
export type TableMetaRequest = z.input<typeof TableMetaRequestSchema>;
export type TableMetaResponse = z.infer<typeof TableMetaResponseSchema>;
export type GetRowRequest = z.input<typeof GetRowRequestSchema>;
export type GetRowResponse = z.infer<typeof GetRowResponseSchema>;
export type OkResponse = z.infer<typeof OkResponseSchema>;
export type DeleteTableRequest = z.input<typeof DeleteTableRequestSchema>;
export type RenameTableRequest = z.input<typeof RenameTableRequestSchema>;
export type DuplicateTableRequest = z.input<typeof DuplicateTableRequestSchema>;
export type CreateChildTableRequest = z.input<typeof CreateChildTableRequestSchema>;
export type RenameColumnsRequest = z.infer<typeof RenameColumnsRequestScheme>;
export type ReorderColumnsRequest = z.infer<typeof ReorderColumnsRequestScheme>;
export type DropColumnsRequest = ReorderColumnsRequest;
export type AddColumnRequest = z.input<typeof AddColumnRequestSchema>;
export type UpdateGenConfigRequest = z.input<typeof UpdateGenConfigRequestSchema>;
export type DeleteRowRequest = z.input<typeof DeleteRowRequestSchema>;
export type AddRowRequest = z.input<typeof AddRowRequestSchema>;
export type RegenRowRequest = z.input<typeof RegenRowRequestSchema>;
export type UpdateRowRequest = z.input<typeof UpdateRowRequestSchema>;
export type DeleteRowsRequest = z.infer<typeof DeleteRowsRequestSchema>;
export type HybridSearchRequest = z.input<typeof HybridSearchRequestSchema>;
export type HybridSearchResponse = z.infer<typeof HybridSearchResponseSchema>;
export type ExportTableRequest = z.input<typeof ExportTableRequestSchema>;
export type ImportTableRequest = z.input<typeof ImportTableRequestSchema>;
export {};
