import { z } from "zod";
export declare const ListTemplatesRequestSchema: z.ZodObject<{
    search_query: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    search_query: string;
}, {
    search_query?: string | undefined;
}>;
export declare const ListTemplatesResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<{
        name: string;
        id: string;
        created_at: string;
        tags: {
            id: string;
        }[];
    }, z.ZodTypeDef, {
        name: string;
        id: string;
        created_at: string;
        tags: {
            id: string;
        }[];
    }>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    items: {
        name: string;
        id: string;
        created_at: string;
        tags: {
            id: string;
        }[];
    }[];
    offset: number;
    limit: number;
    total: number;
}, {
    items?: {
        name: string;
        id: string;
        created_at: string;
        tags: {
            id: string;
        }[];
    }[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const GetTemplateRequestSchema: z.ZodObject<{
    template_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    template_id: string;
}, {
    template_id: string;
}>;
export declare const GetTemplateResponseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    created_at: z.ZodString;
    tags: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
    }, {
        id: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    name: string;
    id: string;
    created_at: string;
    tags: {
        id: string;
    }[];
}, {
    name: string;
    id: string;
    created_at: string;
    tags: {
        id: string;
    }[];
}>;
export declare const ListTablesRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    template_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    template_id: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    template_id: string;
}>;
export declare const ListTablesResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<{
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }, z.ZodTypeDef, {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    items: {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[];
    offset: number;
    limit: number;
    total: number;
}, {
    items?: {
        id: string;
        title: string;
        updated_at: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                embedding_model: string;
                source_column: string;
                object?: "gen_config.embed" | undefined;
            } | {
                object?: "gen_config.llm" | undefined;
                model?: string | undefined;
                prompt?: string | undefined;
                system_prompt?: string | undefined;
                multi_turn?: boolean | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                stop?: string[] | null | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
            } | {
                source_column: string;
                object?: "gen_config.code" | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const GetTableRequestSchema: z.ZodObject<{
    template_id: z.ZodString;
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    template_id: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id: string;
    template_id: string;
}>;
export declare const GetTableResponseSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "image", "bytes", "audio"]>>;
        vlen: z.ZodDefault<z.ZodNumber>;
        index: z.ZodDefault<z.ZodBoolean>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.llm">>;
            model: z.ZodDefault<z.ZodString>;
            prompt: z.ZodDefault<z.ZodString>;
            system_prompt: z.ZodDefault<z.ZodString>;
            multi_turn: z.ZodDefault<z.ZodBoolean>;
            rag_params: z.ZodDefault<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>;
            temperature: z.ZodDefault<z.ZodNumber>;
            top_p: z.ZodDefault<z.ZodNumber>;
            stop: z.ZodDefault<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodDefault<z.ZodNumber>;
            presence_penalty: z.ZodDefault<z.ZodNumber>;
            frequency_penalty: z.ZodDefault<z.ZodNumber>;
            logit_bias: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        }, {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.embed">>;
            embedding_model: z.ZodString;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        }, {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        }>, z.ZodObject<{
            object: z.ZodDefault<z.ZodLiteral<"gen_config.code">>;
            source_column: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            object: "gen_config.code";
            source_column: string;
        }, {
            source_column: string;
            object?: "gen_config.code" | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }>, "many">;
    parent_id: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    title: z.ZodString;
    lock_till: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    updated_at: z.ZodString;
    indexed_at_fts: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_vec: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_sca: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    num_rows: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    title: string;
    updated_at: string;
    cols: {
        id: string;
        index: boolean;
        dtype: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes";
        vlen: number;
        gen_config?: {
            object: "gen_config.embed";
            embedding_model: string;
            source_column: string;
        } | {
            object: "gen_config.llm";
            model: string;
            rag_params: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null;
            temperature: number;
            top_p: number;
            stop: string[] | null;
            max_tokens: number;
            presence_penalty: number;
            frequency_penalty: number;
            logit_bias: Record<string, any>;
            prompt: string;
            system_prompt: string;
            multi_turn: boolean;
        } | {
            object: "gen_config.code";
            source_column: string;
        } | null | undefined;
    }[];
    parent_id: string | null;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}, {
    id: string;
    title: string;
    updated_at: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "str" | "bool" | "image" | "audio" | "int8" | "float64" | "float32" | "float16" | "date-time" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            embedding_model: string;
            source_column: string;
            object?: "gen_config.embed" | undefined;
        } | {
            object?: "gen_config.llm" | undefined;
            model?: string | undefined;
            prompt?: string | undefined;
            system_prompt?: string | undefined;
            multi_turn?: boolean | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            stop?: string[] | null | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
        } | {
            source_column: string;
            object?: "gen_config.code" | undefined;
        } | null | undefined;
    }[];
    parent_id: string | null;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}>;
export declare const ListTableRowsRequestSchema: z.ZodObject<{
    template_id: z.ZodString;
    table_type: z.ZodString;
    table_id: z.ZodString;
    starting_after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    order_by: z.ZodDefault<z.ZodString>;
    order_descending: z.ZodDefault<z.ZodBoolean>;
    float_decimals: z.ZodDefault<z.ZodNumber>;
    vec_decimals: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    offset: number;
    limit: number;
    table_type: string;
    order_by: string;
    order_descending: boolean;
    table_id: string;
    float_decimals: number;
    vec_decimals: number;
    template_id: string;
    starting_after?: string | null | undefined;
}, {
    table_type: string;
    table_id: string;
    template_id: string;
    starting_after?: string | null | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    order_by?: string | undefined;
    order_descending?: boolean | undefined;
    float_decimals?: number | undefined;
    vec_decimals?: number | undefined;
}>;
export declare const ListTableRowsResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<Record<string, any>, z.ZodTypeDef, Record<string, any>>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    items: Record<string, any>[];
    offset: number;
    limit: number;
    total: number;
}, {
    items?: Record<string, any>[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export type IListTemplatesRequest = z.input<typeof ListTemplatesRequestSchema>;
export type IListTemplatesResponse = z.infer<typeof ListTemplatesResponseSchema>;
export type IGetTemplateRequest = z.input<typeof GetTemplateRequestSchema>;
export type IGetTemplateResponse = z.infer<typeof GetTemplateResponseSchema>;
export type IListTablesRequest = z.input<typeof ListTablesRequestSchema>;
export type IListTablesResponse = z.infer<typeof ListTablesResponseSchema>;
export type IGetTableRequest = z.input<typeof GetTableRequestSchema>;
export type IGetTableResponse = z.infer<typeof GetTableResponseSchema>;
export type IListTableRowsRequest = z.input<typeof ListTableRowsRequestSchema>;
export type IListTableRowsResponse = z.infer<typeof ListTableRowsResponseSchema>;
