import { z } from "zod";
export declare const QueryRequestParams: z.ZodObject<{
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    offset: number;
    limit: number;
}, {
    offset?: number | undefined;
    limit?: number | undefined;
}>;
export declare const TableTypesSchema: z.ZodEnum<["action", "knowledge", "chat"]>;
export declare const NameSchema: z.ZodString;
declare const DtypeEnumSchema: z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>;
export declare const ColumnSchemaSchema: z.ZodObject<{
    id: z.ZodString;
    dtype: z.ZodOptional<z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>>>;
    vlen: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    index: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        model: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
            role: z.ZodEnum<["system", "user", "assistant", "function"]>;
            content: z.ZodString;
            name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }, {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }>, "many">>;
        rag_params: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodObject<{
            search_query: z.ZodOptional<z.ZodString>;
            k: z.ZodOptional<z.ZodNumber>;
            fetch_k: z.ZodOptional<z.ZodNumber>;
            document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
            rerank: z.ZodOptional<z.ZodBoolean>;
            concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }, {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        }>>>>;
        tools: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            function: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            }, {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }, {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }>, "many">>>>;
        tool_choice: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodObject<{
            type: z.ZodOptional<z.ZodString>;
            function: z.ZodObject<{
                name: z.ZodString;
                description: z.ZodOptional<z.ZodString>;
                parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
            }, "strip", z.ZodTypeAny, {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            }, {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }, {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }>]>>>>;
        temperature: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
        top_p: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
        n: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
        stop: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        max_tokens: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNumber>>>;
        presence_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
        frequency_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
        logit_bias: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
        user: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodString>>>;
    }, "strip", z.ZodTypeAny, {
        id?: string | undefined;
        model?: string | undefined;
        messages?: {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }[] | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        tools?: {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }[] | null | undefined;
        tool_choice?: string | {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        n?: number | undefined;
        stop?: string[] | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
        user?: string | undefined;
    }, {
        id?: string | undefined;
        model?: string | undefined;
        messages?: {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }[] | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        tools?: {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }[] | null | undefined;
        tool_choice?: string | {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        n?: number | undefined;
        stop?: string[] | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
        user?: string | undefined;
    }>, z.ZodNull]>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
    vlen?: number | undefined;
    index?: boolean | undefined;
    gen_config?: {
        id?: string | undefined;
        model?: string | undefined;
        messages?: {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }[] | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        tools?: {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }[] | null | undefined;
        tool_choice?: string | {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        n?: number | undefined;
        stop?: string[] | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
        user?: string | undefined;
    } | null | undefined;
}, {
    id: string;
    dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
    vlen?: number | undefined;
    index?: boolean | undefined;
    gen_config?: {
        id?: string | undefined;
        model?: string | undefined;
        messages?: {
            role: "function" | "system" | "user" | "assistant";
            content: string;
            name?: string | null | undefined;
        }[] | undefined;
        rag_params?: {
            search_query?: string | undefined;
            k?: number | undefined;
            fetch_k?: number | undefined;
            document_ids?: string[] | undefined;
            rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
            rerank?: boolean | undefined;
            concat_reranker_input?: boolean | undefined;
        } | null | undefined;
        tools?: {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        }[] | null | undefined;
        tool_choice?: string | {
            function: {
                name: string;
                parameters: Record<string, any>;
                description?: string | undefined;
            };
            type?: string | undefined;
        } | null | undefined;
        temperature?: number | undefined;
        top_p?: number | undefined;
        n?: number | undefined;
        stop?: string[] | undefined;
        max_tokens?: number | undefined;
        presence_penalty?: number | undefined;
        frequency_penalty?: number | undefined;
        logit_bias?: Record<string, any> | undefined;
        user?: string | undefined;
    } | null | undefined;
}>;
export declare let ListTableRequestSchema: z.ZodObject<{
    offset: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    limit: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    parent_id: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNull]>>>;
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    offset?: number | undefined;
    limit?: number | undefined;
    parent_id?: string | null | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    offset?: number | undefined;
    limit?: number | undefined;
    parent_id?: string | null | undefined;
}>;
export declare const TableMetaResponseSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodOptional<z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>>>;
        vlen: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        index: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            model: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
                role: z.ZodEnum<["system", "user", "assistant", "function"]>;
                content: z.ZodString;
                name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }>, "many">>;
            rag_params: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>>;
            tools: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>, "many">>>>;
            tool_choice: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>]>>>>;
            temperature: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            top_p: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            n: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            stop: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNumber>>>;
            presence_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            frequency_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            logit_bias: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            user: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodString>>>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }>, "many">;
    parent_id: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    title: z.ZodString;
    lock_till: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodNull]>>;
    updated_at: z.ZodString;
    indexed_at_fts: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_vec: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    indexed_at_sca: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    num_rows: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
    parent_id: string | null;
    title: string;
    updated_at: string;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
    parent_id: string | null;
    title: string;
    updated_at: string;
    indexed_at_fts: string | null;
    indexed_at_vec: string | null;
    indexed_at_sca: string | null;
    num_rows: number;
    lock_till?: number | null | undefined;
}>;
export declare const TableMetaRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
}>;
export declare const ListTableRowsRequestSchema: z.ZodObject<{
    offset: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    limit: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    table_type: z.ZodOptional<z.ZodEnum<["action", "knowledge", "chat"]>>;
    table_id: z.ZodOptional<z.ZodString>;
    columns: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>>;
}, "strip", z.ZodTypeAny, {
    offset?: number | undefined;
    limit?: number | undefined;
    table_type?: "action" | "knowledge" | "chat" | undefined;
    table_id?: string | undefined;
    columns?: string[] | null | undefined;
}, {
    offset?: number | undefined;
    limit?: number | undefined;
    table_type?: "action" | "knowledge" | "chat" | undefined;
    table_id?: string | undefined;
    columns?: string[] | null | undefined;
}>;
export declare const ListTableRowsResponseSchema: z.ZodRecord<z.ZodString, z.ZodAny>;
export declare const GetRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
    columns: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
    columns?: string[] | null | undefined;
}, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
    columns?: string[] | null | undefined;
}>;
export declare const GetRowResponseSchema: z.ZodRecord<z.ZodString, z.ZodAny>;
export declare const PageListTableRowsResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<Record<string, any>, z.ZodTypeDef, Record<string, any>>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    offset: number;
    limit: number;
    items: Record<string, any>[];
    total: number;
}, {
    items?: Record<string, any>[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const PageListTableMetaResponseSchema: z.ZodIntersection<z.ZodObject<{
    items: z.ZodDefault<z.ZodArray<z.ZodType<{
        id: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                id?: string | undefined;
                model?: string | undefined;
                messages?: {
                    role: "function" | "system" | "user" | "assistant";
                    content: string;
                    name?: string | null | undefined;
                }[] | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                tools?: {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                }[] | null | undefined;
                tool_choice?: string | {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                n?: number | undefined;
                stop?: string[] | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
                user?: string | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        title: string;
        updated_at: string;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }, z.ZodTypeDef, {
        id: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                id?: string | undefined;
                model?: string | undefined;
                messages?: {
                    role: "function" | "system" | "user" | "assistant";
                    content: string;
                    name?: string | null | undefined;
                }[] | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                tools?: {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                }[] | null | undefined;
                tool_choice?: string | {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                n?: number | undefined;
                stop?: string[] | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
                user?: string | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        title: string;
        updated_at: string;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }>, "many">>;
    offset: z.ZodDefault<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    total: z.ZodDefault<z.ZodNumber>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    offset: number;
    limit: number;
    items: {
        id: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                id?: string | undefined;
                model?: string | undefined;
                messages?: {
                    role: "function" | "system" | "user" | "assistant";
                    content: string;
                    name?: string | null | undefined;
                }[] | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                tools?: {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                }[] | null | undefined;
                tool_choice?: string | {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                n?: number | undefined;
                stop?: string[] | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
                user?: string | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        title: string;
        updated_at: string;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[];
    total: number;
}, {
    items?: {
        id: string;
        cols: {
            id: string;
            dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
            vlen?: number | undefined;
            index?: boolean | undefined;
            gen_config?: {
                id?: string | undefined;
                model?: string | undefined;
                messages?: {
                    role: "function" | "system" | "user" | "assistant";
                    content: string;
                    name?: string | null | undefined;
                }[] | undefined;
                rag_params?: {
                    search_query?: string | undefined;
                    k?: number | undefined;
                    fetch_k?: number | undefined;
                    document_ids?: string[] | undefined;
                    rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                    rerank?: boolean | undefined;
                    concat_reranker_input?: boolean | undefined;
                } | null | undefined;
                tools?: {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                }[] | null | undefined;
                tool_choice?: string | {
                    function: {
                        name: string;
                        parameters: Record<string, any>;
                        description?: string | undefined;
                    };
                    type?: string | undefined;
                } | null | undefined;
                temperature?: number | undefined;
                top_p?: number | undefined;
                n?: number | undefined;
                stop?: string[] | undefined;
                max_tokens?: number | undefined;
                presence_penalty?: number | undefined;
                frequency_penalty?: number | undefined;
                logit_bias?: Record<string, any> | undefined;
                user?: string | undefined;
            } | null | undefined;
        }[];
        parent_id: string | null;
        title: string;
        updated_at: string;
        indexed_at_fts: string | null;
        indexed_at_vec: string | null;
        indexed_at_sca: string | null;
        num_rows: number;
        lock_till?: number | null | undefined;
    }[] | undefined;
    offset?: number | undefined;
    limit?: number | undefined;
    total?: number | undefined;
}>, z.ZodRecord<z.ZodString, z.ZodAny>>;
export declare const OkResponseSchema: z.ZodObject<{
    ok: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    ok: boolean;
}, {
    ok?: boolean | undefined;
}>;
export declare const DeleteTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
}>;
export declare const RenameTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id_src: z.ZodString;
    table_id_dst: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
}>;
export declare const DuplicateTableRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id_src: z.ZodString;
    table_id_dst: z.ZodString;
    include_data: z.ZodOptional<z.ZodBoolean>;
    deploy: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
    include_data?: boolean | undefined;
    deploy?: boolean | undefined;
}, {
    table_type: "action" | "knowledge" | "chat";
    table_id_src: string;
    table_id_dst: string;
    include_data?: boolean | undefined;
    deploy?: boolean | undefined;
}>;
export declare const RenameColumnsRequestScheme: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_map: z.ZodRecord<z.ZodString, z.ZodString>;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_map: Record<string, string>;
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_map: Record<string, string>;
}>;
export declare const ReorderColumnsRequestScheme: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_names: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_names: string[];
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_names: string[];
}>;
export declare const AddColumnRequestSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodOptional<z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>>>;
        vlen: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        index: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            model: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
                role: z.ZodEnum<["system", "user", "assistant", "function"]>;
                content: z.ZodString;
                name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }>, "many">>;
            rag_params: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>>;
            tools: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>, "many">>>>;
            tool_choice: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>]>>>>;
            temperature: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            top_p: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            n: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            stop: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNumber>>>;
            presence_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            frequency_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            logit_bias: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            user: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodString>>>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
}, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
}>;
export declare const UpdateGenConfigRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    column_map: z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodAny, z.ZodAny>>;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_map: Record<string, Record<any, any>>;
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    column_map: Record<string, Record<any, any>>;
}>;
export declare const DeleteRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}>;
export declare const AddRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    reindex: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    table_id: z.ZodString;
    data: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    data: Record<string, any>;
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    reindex?: boolean | undefined;
}, {
    data: Record<string, any>;
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    reindex?: boolean | undefined;
}>;
export declare const RegenRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}, {
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}>;
export declare const UpdateRowRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    row_id: z.ZodString;
    data: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    data: Record<string, any>;
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}, {
    data: Record<string, any>;
    table_id: string;
    row_id: string;
    table_type: "action" | "knowledge" | "chat";
}>;
export declare const DeleteRowsRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    where: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    where?: string | undefined;
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    where?: string | undefined;
}>;
export declare const HybridSearchRequestSchema: z.ZodObject<{
    table_type: z.ZodEnum<["action", "knowledge", "chat"]>;
    table_id: z.ZodString;
    query: z.ZodString;
    where: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    limit: z.ZodOptional<z.ZodNumber>;
    metric: z.ZodOptional<z.ZodString>;
    nprobes: z.ZodOptional<z.ZodNumber>;
    refine_factor: z.ZodOptional<z.ZodNumber>;
    reranking_model: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    query: string;
    where?: string | null | undefined;
    limit?: number | undefined;
    metric?: string | undefined;
    nprobes?: number | undefined;
    refine_factor?: number | undefined;
    reranking_model?: string | null | undefined;
}, {
    table_id: string;
    table_type: "action" | "knowledge" | "chat";
    query: string;
    where?: string | null | undefined;
    limit?: number | undefined;
    metric?: string | undefined;
    nprobes?: number | undefined;
    refine_factor?: number | undefined;
    reranking_model?: string | null | undefined;
}>;
export declare const HybridSearchResponseSchema: z.ZodArray<z.ZodAny, "many">;
export declare const CreateTableRequestSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodOptional<z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>>>;
        vlen: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        index: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            model: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
                role: z.ZodEnum<["system", "user", "assistant", "function"]>;
                content: z.ZodString;
                name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }>, "many">>;
            rag_params: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>>;
            tools: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>, "many">>>>;
            tool_choice: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>]>>>>;
            temperature: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            top_p: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            n: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            stop: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNumber>>>;
            presence_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            frequency_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            logit_bias: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            user: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodString>>>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
}, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
}>;
export type TableTypes = z.infer<typeof TableTypesSchema>;
export type ListTableRowsRequest = z.infer<typeof ListTableRowsRequestSchema>;
export type ListTableRowsResponse = z.infer<typeof ListTableRowsResponseSchema>;
export type DtypeEnum = z.infer<typeof DtypeEnumSchema>;
export type ColumnSchema = z.infer<typeof ColumnSchemaSchema>;
export type ListTableRequest = z.infer<typeof ListTableRequestSchema>;
export type PageListTableRowsResponse = z.infer<typeof PageListTableRowsResponseSchema>;
export type PageListTableMetaResponse = z.infer<typeof PageListTableMetaResponseSchema>;
export type TableMetaRequest = z.infer<typeof TableMetaRequestSchema>;
export type TableMetaResponse = z.infer<typeof TableMetaResponseSchema>;
export type GetRowRequest = z.infer<typeof GetRowRequestSchema>;
export type GetRowResponse = z.infer<typeof GetRowResponseSchema>;
export type OkResponse = z.infer<typeof OkResponseSchema>;
export type DeleteTableRequest = z.infer<typeof DeleteTableRequestSchema>;
export type RenameTableRequest = z.infer<typeof RenameTableRequestSchema>;
export type DuplicateTableRequest = z.infer<typeof DuplicateTableRequestSchema>;
export type RenameColumnsRequest = z.infer<typeof RenameColumnsRequestScheme>;
export type ReorderColumnsRequest = z.infer<typeof ReorderColumnsRequestScheme>;
export type DropColumnsRequest = ReorderColumnsRequest;
export type AddColumnRequest = z.infer<typeof AddColumnRequestSchema>;
export type UpdateGenConfigRequest = z.infer<typeof UpdateGenConfigRequestSchema>;
export type DeleteRowRequest = z.infer<typeof DeleteRowRequestSchema>;
export type AddRowRequest = z.infer<typeof AddRowRequestSchema>;
export type RegenRowRequest = z.infer<typeof RegenRowRequestSchema>;
export type UpdateRowRequest = z.infer<typeof UpdateRowRequestSchema>;
export type DeleteRowsRequest = z.infer<typeof DeleteRowsRequestSchema>;
export type HybridSearchRequest = z.infer<typeof HybridSearchRequestSchema>;
export type HybridSearchResponse = z.infer<typeof HybridSearchResponseSchema>;
export {};
