import { Base } from "../../resources/base";
import { ListTableRowsRequest, ListTableRequest, PageListTableMetaResponse, TableMetaRequest, GetRowRequest, GetRowResponse, DeleteTableRequest, OkResponse, RenameTableRequest, DuplicateTableRequest, RenameColumnsRequest, ReorderColumnsRequest, DropColumnsRequest, AddColumnRequest, UpdateGenConfigRequest, DeleteRowRequest, AddRowRequest, RegenRowRequest, UpdateRowRequest, DeleteRowsRequest, HybridSearchRequest, HybridSearchResponse, TableMetaResponse, PageListTableRowsResponse } from "../../resources/gen_tables/tables";
import { GetConversationThreadRequest, GetConversationThreadResponse, GenTableChatCompletionChunks, CreateChatTableRequest } from "../../resources/gen_tables/chat";
import { CreateActionTableRequest } from "../../resources/gen_tables/action";
import { UploadFileRequest, CreateKnowledgeTableRequest } from "../../resources/gen_tables/knowledge";
export declare class GenTable extends Base {
    listTables({ table_type, limit, offset, parent_id }: ListTableRequest): Promise<PageListTableMetaResponse>;
    getTable(params: TableMetaRequest): Promise<TableMetaResponse>;
    listRows({ columns, limit, offset, table_id, table_type }: ListTableRowsRequest): Promise<PageListTableRowsResponse>;
    getRow(params: GetRowRequest): Promise<GetRowResponse>;
    getConversationThread(params: GetConversationThreadRequest): Promise<GetConversationThreadResponse>;
    createActionTable(params: CreateActionTableRequest): Promise<TableMetaResponse>;
    createChatTable(params: CreateChatTableRequest): Promise<TableMetaResponse>;
    createKnowledgeTable(params: CreateKnowledgeTableRequest): Promise<TableMetaResponse>;
    deleteTable(params: DeleteTableRequest): Promise<OkResponse>;
    deleteRow(params: DeleteRowRequest): Promise<OkResponse>;
    /**
     * @param {string} [params.where] - Optional. SQL where clause. If not provided, will match all rows and thus deleting all table content.
     */
    deleteRows(params: DeleteRowsRequest): Promise<OkResponse>;
    renameTable(params: RenameTableRequest): Promise<TableMetaResponse>;
    duplicateTable({ table_id_dst, table_id_src, table_type, include_data, deploy, }: DuplicateTableRequest): Promise<TableMetaResponse>;
    renameColumns(params: RenameColumnsRequest): Promise<TableMetaResponse>;
    reorderColumns(params: ReorderColumnsRequest): Promise<TableMetaResponse>;
    dropColumns(params: DropColumnsRequest): Promise<TableMetaResponse>;
    addActionColumns(params: AddColumnRequest): Promise<TableMetaResponse>;
    addKnowledgeColumns(params: AddColumnRequest): Promise<TableMetaResponse>;
    addChatColumns(params: AddColumnRequest): Promise<TableMetaResponse>;
    updateGenConfig(params: UpdateGenConfigRequest): Promise<TableMetaResponse>;
    addRowStream({ table_id, table_type, data, reindex }: AddRowRequest): Promise<ReadableStream<{
        object: "chat.completion" | "chat.completion.chunk";
        id: string;
        model: string;
        created: number;
        choices: ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            } | null;
        }[]) & ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            } | null;
        }[] | undefined);
        row_id: string;
        output_column_name: string;
        usage?: {
            prompt_tokens?: number | null | undefined;
            completions_tokens?: number | null | undefined;
            total_tokens?: number | null | undefined;
        } | undefined;
        references?: {
            object: string;
        } | null | undefined;
    }>>;
    addRow({ table_id, table_type, data, reindex }: AddRowRequest): Promise<GenTableChatCompletionChunks>;
    regenRowStream(params: RegenRowRequest): Promise<ReadableStream<{
        object: "chat.completion" | "chat.completion.chunk";
        id: string;
        model: string;
        created: number;
        choices: ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            } | null;
        }[]) & ({
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
        }[] | {
            message: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            };
            index: number;
            finish_reason: string | null;
            delta: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            } | null;
        }[] | undefined);
        row_id: string;
        output_column_name: string;
        usage?: {
            prompt_tokens?: number | null | undefined;
            completions_tokens?: number | null | undefined;
            total_tokens?: number | null | undefined;
        } | undefined;
        references?: {
            object: string;
        } | null | undefined;
    }>>;
    regenRow(params: RegenRowRequest): Promise<GenTableChatCompletionChunks>;
    updateRow(params: UpdateRowRequest): Promise<OkResponse>;
    hybridSearch(params: HybridSearchRequest): Promise<HybridSearchResponse>;
    uploadFile(params: UploadFileRequest): Promise<OkResponse>;
}
