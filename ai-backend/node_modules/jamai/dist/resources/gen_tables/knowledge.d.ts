import { z } from "zod";
export declare const CreateKnowledgeTableRequestSchema: z.ZodObject<{
    id: z.ZodString;
    cols: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        dtype: z.ZodOptional<z.ZodDefault<z.ZodEnum<["int", "int8", "float", "float64", "float32", "float16", "bool", "str", "date-time", "file", "bytes"]>>>;
        vlen: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        index: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
        gen_config: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            id: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            model: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            messages: z.ZodOptional<z.ZodArray<z.ZodObject<{
                role: z.ZodEnum<["system", "user", "assistant", "function"]>;
                content: z.ZodString;
                name: z.ZodNullable<z.ZodOptional<z.ZodString>>;
            }, "strip", z.ZodTypeAny, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }, {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }>, "many">>;
            rag_params: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodObject<{
                search_query: z.ZodOptional<z.ZodString>;
                k: z.ZodOptional<z.ZodNumber>;
                fetch_k: z.ZodOptional<z.ZodNumber>;
                document_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                rank_profile: z.ZodOptional<z.ZodEnum<["bm25", "semantic", "hybrid", "hybrid_log"]>>;
                rerank: z.ZodOptional<z.ZodBoolean>;
                concat_reranker_input: z.ZodOptional<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }, {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            }>>>>;
            tools: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>, "many">>>>;
            tool_choice: z.ZodOptional<z.ZodOptional<z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodObject<{
                type: z.ZodOptional<z.ZodString>;
                function: z.ZodObject<{
                    name: z.ZodString;
                    description: z.ZodOptional<z.ZodString>;
                    parameters: z.ZodRecord<z.ZodString, z.ZodAny>;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }, {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }, {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }>]>>>>;
            temperature: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            top_p: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            n: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            stop: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
            max_tokens: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodNumber>>>;
            presence_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            frequency_penalty: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodNumber>>>>;
            logit_bias: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodAny>>>>;
            user: z.ZodOptional<z.ZodOptional<z.ZodDefault<z.ZodString>>>;
        }, "strip", z.ZodTypeAny, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }, {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        }>, z.ZodNull]>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }, {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }>, "many">;
    embedding_model: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
    embedding_model: string;
}, {
    id: string;
    cols: {
        id: string;
        dtype?: "float" | "int" | "int8" | "float64" | "float32" | "float16" | "bool" | "str" | "date-time" | "file" | "bytes" | undefined;
        vlen?: number | undefined;
        index?: boolean | undefined;
        gen_config?: {
            id?: string | undefined;
            model?: string | undefined;
            messages?: {
                role: "function" | "system" | "user" | "assistant";
                content: string;
                name?: string | null | undefined;
            }[] | undefined;
            rag_params?: {
                search_query?: string | undefined;
                k?: number | undefined;
                fetch_k?: number | undefined;
                document_ids?: string[] | undefined;
                rank_profile?: "bm25" | "semantic" | "hybrid" | "hybrid_log" | undefined;
                rerank?: boolean | undefined;
                concat_reranker_input?: boolean | undefined;
            } | null | undefined;
            tools?: {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            }[] | null | undefined;
            tool_choice?: string | {
                function: {
                    name: string;
                    parameters: Record<string, any>;
                    description?: string | undefined;
                };
                type?: string | undefined;
            } | null | undefined;
            temperature?: number | undefined;
            top_p?: number | undefined;
            n?: number | undefined;
            stop?: string[] | undefined;
            max_tokens?: number | undefined;
            presence_penalty?: number | undefined;
            frequency_penalty?: number | undefined;
            logit_bias?: Record<string, any> | undefined;
            user?: string | undefined;
        } | null | undefined;
    }[];
    embedding_model: string;
}>;
export type CreateKnowledgeTableRequest = z.infer<typeof CreateKnowledgeTableRequestSchema>;
export declare const UploadFileRequestSchema: z.ZodEffects<z.ZodObject<{
    file: z.ZodEffects<z.ZodType<File, z.ZodTypeDef, File>, File, File>;
    file_name: z.ZodEffects<z.ZodString, string, string>;
    table_id: z.ZodEffects<z.ZodString, string, string>;
    chunk_size: z.ZodOptional<z.ZodEffects<z.ZodNumber, number, number>>;
    chunk_overlap: z.ZodOptional<z.ZodEffects<z.ZodNumber, number, number>>;
}, z.UnknownKeysParam, z.ZodTypeAny, {
    file: File;
    table_id: string;
    file_name: string;
    chunk_size?: number | undefined;
    chunk_overlap?: number | undefined;
}, {
    file: File;
    table_id: string;
    file_name: string;
    chunk_size?: number | undefined;
    chunk_overlap?: number | undefined;
}>, {
    file: File;
    table_id: string;
    file_name: string;
    chunk_size?: number | undefined;
    chunk_overlap?: number | undefined;
}, FormData | {
    entries(): IterableIterator<[string, FormDataEntryValue]>;
    [Symbol.iterator](): IterableIterator<[string, FormDataEntryValue]>;
}>;
export type UploadFileRequest = z.infer<typeof UploadFileRequestSchema>;
