import Agent from "agentkeepalive";
import { ZodObject, ZodRawShape, z } from "zod";
export declare function createHttpAgent(payload?: Agent.HttpOptions): Agent;
export declare function createHttpsAgent(payload?: Agent.HttpOptions): Agent.HttpsAgent;
export declare function applyMixins(derivedCtor: any, constructors: any[]): void;
export declare const passthrough: <T extends ZodRawShape>(schema: ZodObject<T>) => z.ZodIntersection<ZodObject<T, z.UnknownKeysParam, z.ZodTypeAny, z.objectUtil.addQuestionMarks<z.baseObjectOutputType<T>, { [k_1 in keyof z.baseObjectOutputType<T>]: undefined extends z.baseObjectOutputType<T>[k_1] ? never : k_1; }[keyof T]> extends infer T_1 ? { [k in keyof T_1]: z.objectUtil.addQuestionMarks<z.baseObjectOutputType<T>, { [k_1 in keyof z.baseObjectOutputType<T>]: undefined extends z.baseObjectOutputType<T>[k_1] ? never : k_1; }[keyof T]>[k]; } : never, z.baseObjectInputType<T> extends infer T_2 ? { [k_2 in keyof T_2]: z.baseObjectInputType<T>[k_2]; } : never>, z.ZodRecord<z.ZodString, z.ZodAny>>;
