import t from"agentkeepalive";import{z as e}from"zod";import a from"axios";import r from"axios-retry";function n(){return n=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(t[r]=a[r])}return t},n.apply(this,arguments)}function o(e={maxFreeSockets:10,freeSocketTimeout:2e4}){return new t(e)}function s(e={maxFreeSockets:10,freeSocketTimeout:2e4}){return new t.HttpsAgent(e)}class i{constructor({baseURL:t,apikey:e,projectId:n,maxRetries:i=0,httpClient:l,timeout:c}){this.maxRetries=void 0,this.httpClient=void 0,this.timeout=void 0,this.maxRetries=i,this.httpClient=l||a.create({}),this.timeout=c,this.httpClient.defaults.baseURL=t||"https://app.jamaibase.com",e&&n&&this.setApiKeyProjId(e,n),this.timeout&&(this.httpClient.defaults.timeout=this.timeout),i>0&&r(this.httpClient,{retries:this.maxRetries,retryDelay:t=>(console.log("Retry attempt: ",t),1e3*t),retryCondition:t=>!0}),this.httpClient.defaults.httpAgent=o(),this.httpClient.defaults.httpsAgent=s()}setHttpagentConfig(t){this.httpClient.defaults.httpAgent=o(t)}setHttpsagentConfig(t){this.httpClient.defaults.httpsAgent=s(t)}async getHealth(){return this.httpClient.get("/health")}setApiKeyProjId(t,e){this.httpClient.defaults.headers.common.Authorization=`Bearer ${t}`,this.httpClient.defaults.headers.common["x-project-id"]=e}setAuthHeader(t){this.httpClient.defaults.headers.common.Authorization=t}}const l=e.enum(["system","user","assistant","function"]),c=e.object({role:l,content:e.string(),name:e.string().optional().nullable()}),p=e.object({search_query:e.string().optional(),k:e.number().optional(),fetch_k:e.number().optional(),document_ids:e.array(e.string()).optional(),rank_profile:e.enum(["bm25","semantic","hybrid","hybrid_log"]).optional(),rerank:e.boolean().optional(),concat_reranker_input:e.boolean().optional()}),d=e.object({name:e.string(),description:e.string().optional(),parameters:e.record(e.string(),e.any())}),u=e.object({type:e.string().optional(),function:d});e.object({name:e.string()});const b=e.object({prompt_tokens:e.number().nullable().optional(),completions_tokens:e.number().nullable().optional(),total_tokens:e.number().nullable().optional()}),m=e.object({id:e.string().optional(),model:e.string().optional(),messages:e.array(c),rag_params:p.nullable().optional(),tools:e.array(u).nullable().optional(),tool_choice:e.union([e.string(),u]).nullable().optional(),temperature:e.number().optional().default(1).optional(),top_p:e.number().optional().default(1).optional(),n:e.number().optional().default(1).optional(),stop:e.array(e.string()).optional(),max_tokens:e.number().default(2048).optional(),presence_penalty:e.number().optional().default(0).optional(),frequency_penalty:e.number().optional().default(0).optional(),logit_bias:e.record(e.string(),e.any()).default({}).optional(),user:e.string().default("").optional()}),_=e.object({message:c,index:e.number(),finish_reason:e.string().nullable()}),h=e.object({message:c,index:e.number(),finish_reason:e.string().nullable(),delta:c.nullable()}),g=e.object({object:e.string()}),y=e.object({id:e.string(),object:e.enum(["chat.completion","chat.completion.chunk"]),created:e.number(),model:e.string(),usage:b.optional(),choices:e.union([e.array(_),e.array(h)]),references:g.nullable().optional()});function f(t){return e.object({items:e.array(t).describe("List of items paginated items.").default([]),offset:e.number().describe("Number of skipped items.").default(0),limit:e.number().describe("Number of items per page.").default(100),total:e.number().describe("Total number of items.").default(0)}).and(e.record(e.string(),e.any()))}e.object({id:e.string(),object:e.enum(["chat.completion.chunk"]),created:e.number(),model:e.string(),usage:b,choices:e.array(h),references:g.nullable().optional()});const w=e.object({offset:e.number().describe("Number of skipped items.").default(0),limit:e.number().describe("Number of items per page.").default(100)}),v=e.enum(["action","knowledge","chat"]),C=e.string().regex(/^[a-zA-Z0-9][a-zA-Z0-9_ \-]{0,98}[a-zA-Z0-9]$/,"Invalid Name"),j=e.enum(["int","int8","float","float64","float32","float16","bool","str","date-time","file","bytes"]),S=e.object({id:e.string(),dtype:j.default("str").optional(),vlen:e.number().int().gte(0).default(0).optional(),index:e.boolean().default(!0).optional(),gen_config:e.union([m.partial(),e.null()]).optional()});w.extend({parent_id:e.union([e.string(),e.null()]).optional()}).partial().extend({table_type:v});const $=e.object({id:e.string(),cols:e.array(S),parent_id:e.union([e.string(),e.null()]),title:e.string(),lock_till:e.union([e.number(),e.null()]).optional(),updated_at:e.string(),indexed_at_fts:e.union([e.string(),e.null()]),indexed_at_vec:e.union([e.string(),e.null()]),indexed_at_sca:e.union([e.string(),e.null()]),num_rows:e.number().int()});e.object({table_type:v,table_id:C}),w.extend({table_type:v,table_id:C,columns:e.array(C).nullable().optional()}).partial();const E=e.record(C,e.any());e.object({table_type:v,table_id:C,row_id:e.string(),columns:e.array(C).nullable().optional()});const R=e.record(C,e.any()),k=f(E),x=f($),P=e.object({ok:e.boolean().default(!0)});e.object({table_type:v,table_id:C}),e.object({table_type:v,table_id_src:C,table_id_dst:C}),e.object({table_type:v,table_id_src:C,table_id_dst:C,include_data:e.boolean().optional(),deploy:e.boolean().optional()}),e.object({table_type:v,table_id:C,column_map:e.record(C,C)}),e.object({table_type:v,table_id:C,column_names:e.array(C)}),e.object({id:e.string().regex(/^[a-zA-Z0-9][a-zA-Z0-9_ \-]{0,98}[a-zA-Z0-9]$/),cols:e.array(S)}),e.object({table_type:v,table_id:C,column_map:e.record(C,e.record(e.any(),e.any()))}),e.object({table_type:v,table_id:C,row_id:e.string()}),e.object({table_type:v,reindex:e.boolean().default(!0).optional(),table_id:C,data:e.record(C,e.any())}),e.object({table_type:v,table_id:C,row_id:e.string()}),e.object({table_type:v,table_id:C,row_id:C,data:e.record(C,e.any())}),e.object({table_type:v,table_id:C,where:e.string().optional()}),e.object({table_type:v,table_id:C,query:e.string(),where:e.string().nullable().optional(),limit:e.number().gt(0).lte(1e3).optional(),metric:e.string().optional(),nprobes:e.number().gt(0).lte(1e3).optional(),refine_factor:e.number().gt(0).lte(1e3).optional(),reranking_model:e.string().nullable().optional()});const O=e.array(e.any());e.object({id:e.string().regex(/^[a-zA-Z0-9][a-zA-Z0-9_ \-]{0,98}[a-zA-Z0-9]$/),cols:e.array(S)}),e.object({table_id:C});const N=e.object({object:e.enum(["chat.thread"]).describe("Type of API response object."),thread:e.array(c).describe("List of chat messages.").default([])}),A=e.object({object:e.enum(["gen_table.completion.chunks"]),columns:e.record(e.string(),y),row_id:e.string()});y.extend({output_column_name:e.string(),row_id:e.string()}),g.extend({object:e.enum(["gen_table.reference"]),output_column_name:e.string()});const T=["table_type"];e.object({model:e.string().optional(),capabilities:e.enum(["completion","chat","image","embed","rerank"]).nullable().optional()});const z=e.object({id:e.string().default("openai/gpt-3.5-turbo"),object:e.string(),name:e.string(),context_length:e.number().default(16384),languages:e.array(e.string()),capabilities:e.array(e.enum(["completion","chat","image","embed","rerank"])).default(["chat"]),created:e.number(),owned_by:e.string()}),D=e.object({object:e.enum(["chat.model_info"]),data:e.array(z)});e.object({prefer:e.string().optional(),capabilities:e.enum(["completion","chat","image","embed","rerank"]).nullable().optional()});const q=e.array(e.string());class Z extends i{}var I;I=Z,[class extends i{async listTables({table_type:t,limit:e=100,offset:a=0,parent_id:r}){let n=`/api/v1/gen_tables/${t}?offset=${a}&limit=${e}`;r&&(n+=`&parent_id=${r}`);const o=await this.httpClient.get(n);return new Promise((t,e)=>{200==o.status?t(x.parse(o.data)):console.error("Received Error Status: ",o.status)})}async getTable(t){let e=`/api/v1/gen_tables/${t.table_type}/${t.table_id}`;const a=await this.httpClient.get(e);return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async listRows({columns:t,limit:e=100,offset:a=0,table_id:r,table_type:n}){let o=`/api/v1/gen_tables/${n}/${r}/rows?offset=${a}&limit=${e}`;t&&(o=o+"&"+t.map(t=>`columns=${encodeURIComponent(t)}`).join("&"));const s=await this.httpClient.get(o);return new Promise((t,e)=>{200==s.status?t(k.parse(s.data)):console.error("Received Error Status: ",s.status)})}async getRow(t){let e=`/api/v1/gen_tables/${t.table_type}/${t.table_id}/rows/${t.row_id}`;t.columns&&(e=e+"?"+t.columns.map(t=>`columns=${encodeURIComponent(t)}`).join("&"));const a=await this.httpClient.get(e);return new Promise((t,e)=>{200==a.status?t(R.parse(a.data)):console.error("Received Error Status: ",a.status)})}async getConversationThread(t){let e=`/api/v1/gen_tables/chat/${t.table_id}/thread?table_id=${t.table_id}`;const a=await this.httpClient.get(e);return new Promise((t,e)=>{200==a.status?t(N.parse(a.data)):console.error("Received Error Status: ",a.status)})}async createActionTable(t){const e=await this.httpClient.post("/api/v1/gen_tables/action",n({},t,{stream:!1}),{});return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async createChatTable(t){const e=await this.httpClient.post("/api/v1/gen_tables/chat",t);return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async createKnowledgeTable(t){const e=await this.httpClient.post("/api/v1/gen_tables/knowledge",t);return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async deleteTable(t){let e=`/api/v1/gen_tables/${t.table_type}/${t.table_id}`;const a=await this.httpClient.delete(e);return new Promise((t,e)=>{200==a.status?t(P.parse(a.data)):console.error("Received Error Status: ",a.status)})}async deleteRow(t){let e=`/api/v1/gen_tables/${t.table_type}/${t.table_id}/rows/${t.row_id}`;const a=await this.httpClient.delete(e);return new Promise((t,e)=>{200==a.status?t(P.parse(a.data)):console.error("Received Error Status: ",a.status)})}async deleteRows(t){const e=`/api/v1/gen_tables/${t.table_type}/rows/delete`,a=await this.httpClient.post(e,{table_id:t.table_id,where:t.where});return new Promise((t,e)=>{200==a.status?t(P.parse({ok:!0})):(console.error("Received Error Status: ",a.status),t(P.parse({ok:!1})))})}async renameTable(t){let e=`/api/v1/gen_tables/${t.table_type}/rename/${t.table_id_src}/${t.table_id_dst}`;const a=await this.httpClient.post(e,{},{});return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async duplicateTable({table_id_dst:t,table_id_src:e,table_type:a,include_data:r=!0,deploy:n=!1}){let o=`/api/v1/gen_tables/${a}/duplicate/${e}/${t}?include_data=${r}&deploy=${n}`;const s=await this.httpClient.post(o,{},{});return new Promise((t,e)=>{200==s.status?t($.parse(s.data)):console.error("Received Error Status: ",s.status)})}async renameColumns(t){let e=`/api/v1/gen_tables/${t.table_type}/columns/rename`;const a=await this.httpClient.post(e,{table_id:t.table_id,column_map:t.column_map},{});return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async reorderColumns(t){let e=`/api/v1/gen_tables/${t.table_type}/columns/reorder`;const a=await this.httpClient.post(e,{table_id:t.table_id,column_names:t.column_names},{});return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async dropColumns(t){let e=`/api/v1/gen_tables/${t.table_type}/columns/drop`;const a=await this.httpClient.post(e,{table_id:t.table_id,column_names:t.column_names},{});return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async addActionColumns(t){const e=await this.httpClient.post("/api/v1/gen_tables/action/columns/add",t);return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async addKnowledgeColumns(t){const e=await this.httpClient.post("/api/v1/gen_tables/knowledge/columns/add",t);return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async addChatColumns(t){const e=await this.httpClient.post("/api/v1/gen_tables/chat/columns/add",t);return new Promise((t,a)=>{200==e.status?t($.parse(e.data)):console.error("Received Error Status: ",e.status)})}async updateGenConfig(t){let e=`/api/v1/gen_tables/${t.table_type}/gen_config/update`;const a=await this.httpClient.post(e,{table_id:t.table_id,column_map:t.column_map},{});return new Promise((t,e)=>{200==a.status?t($.parse(a.data)):console.error("Received Error Status: ",a.status)})}async addRowStream({table_id:t,table_type:e,data:a,reindex:r=!0}){const n=`/api/v1/gen_tables/${e}/rows/add`,o=await this.httpClient.post(n,{table_id:t,data:a,stream:!0},{responseType:"stream",params:{reindex:r}});if(200!=o.status)throw new Error(`Received Error Status: ${o.status}`);const s=new ReadableStream({async start(t){o.data.on("data",e=>{if((e=e.toString()).endsWith("\n\n")){const a=e.split("\n\n").filter(t=>t.trim()).flatMap(t=>t.split("\n"));for(const e of a){const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a);continue}}}else{const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a)}}}),o.data.on("error",t=>{console.error("error: ",t)}),o.data.on("end",()=>{t.close()})}});return s}async addRow({table_id:t,table_type:e,data:a,reindex:r=!0}){const n=`/api/v1/gen_tables/${e}/rows/add`,o=await this.httpClient.post(n,{table_id:t,stream:!1,data:a},{params:{reindex:r}});return new Promise((t,e)=>{200==o.status?t(A.parse(o.data)):console.error("Received Error Status: ",o.status)})}async regenRowStream(t){const e=`/api/v1/gen_tables/${t.table_type}/rows/regen`,a=await this.httpClient.post(e,{table_id:t.table_id,row_id:t.row_id,stream:!0},{responseType:"stream"});if(200!=a.status)throw new Error(`Received Error Status: ${a.status}`);return new ReadableStream({async start(t){a.data.on("data",e=>{if((e=e.toString()).endsWith("\n\n")){const a=e.split("\n\n").filter(t=>t.trim()).flatMap(t=>t.split("\n"));for(const e of a){const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a);continue}}}else{const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a)}}}),a.data.on("error",t=>{console.error("error: ",t)}),a.data.on("end",()=>{t.close()})}})}async regenRow(t){const e=`/api/v1/gen_tables/${t.table_type}/rows/regen`,a=await this.httpClient.post(e,{table_id:t.table_id,row_id:t.row_id,stream:!1},{});return new Promise((t,e)=>{200==a.status?t(A.parse(a.data)):console.error("Received Error Status: ",a.status)})}async updateRow(t){const e=`/api/v1/gen_tables/${t.table_type}/rows/update`,a=await this.httpClient.post(e,{table_id:t.table_id,row_id:t.row_id,data:t.data});return new Promise((t,e)=>{200==a.status?t(P.parse({ok:!0})):(console.error("Received Error Status: ",a.status),t(P.parse({ok:!1})))})}async hybridSearch(t){const e=`/api/v1/gen_tables/${t.table_type}/hybrid_search`,a=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)e.indexOf(a=o[r])>=0||(n[a]=t[a]);return n}(t,T),r=await this.httpClient.post(e,a);return new Promise((t,e)=>{200==r.status?t(O.parse(r.data)):console.error("Received Error Status: ",r.status)})}async uploadFile(t){const e=new FormData;e.append("file",t.file),e.append("file_name",t.file_name),e.append("table_id",t.table_id),null!=t&&t.chunk_size&&e.append("chunk_size",t.chunk_size.toString()),null!=t&&t.chunk_overlap&&e.append("chunk_overlap",t.chunk_overlap.toString());try{return(await this.httpClient.post("/api/v1/gen_tables/knowledge/upload_file",e,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error uploading file:",t),t}}},class extends i{async modelInfo(t){const e=await this.httpClient.get("/api/v1/models",{params:t});return new Promise((t,a)=>{200==e.status?t(D.parse(e.data)):console.error("Received Error Status: ",e.status)})}async modelNames(t){const e=await this.httpClient.get("/api/v1/model_names",{params:t});return new Promise((t,a)=>{200==e.status?t(q.parse(e.data)):console.error("Received Error Status: ",e.status)})}async generateChatCompletionsStream(t){const e=await this.httpClient.post("/api/v1/chat/completions",n({},t,{stream:!0}),{responseType:"stream"});return new ReadableStream({async start(t){e.data.on("data",e=>{if((e=e.toString()).endsWith("\n\n")){const a=e.split("\n\n").filter(t=>t.trim()).flatMap(t=>t.split("\n"));for(const e of a){const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a);continue}}}else{const a=e.toString().replace(/^data: /,"").replace(/data: \[DONE\]\s+$/,"");if("[DONE]"==a.trim())return;try{const e=JSON.parse(a);t.enqueue(e)}catch(t){console.error("Error parsing:",a)}}}),e.data.on("error",t=>{console.error("error: ",t)}),e.data.on("end",()=>{t.close()})}})}async generateChatCompletions(t){const e=await this.httpClient.post("/api/v1/chat/completions",n({},t,{stream:!1}),{});return new Promise((t,a)=>{200==e.status?t(y.parse(e.data)):console.error("Received Error Status: ",e.status)})}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(I.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e)||Object.create(null))})});export{Z as default};
