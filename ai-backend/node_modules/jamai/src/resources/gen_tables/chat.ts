import { z } from "zod";
import { NameSchema, CreateTableRequestSchema } from "@/resources/gen_tables/tables";
import { ChatEntrySchema, ChatCompletionChunkSchema, ReferencesSchema } from "@/resources/llm/chat";

export const GetConversationThreadRequestSchema = z.object({
    table_id: NameSchema,
});

export const GetConversationThreadResponseSchema = z.object({
    object: z.enum(["chat.thread"]).describe("Type of API response object."),
    thread: z.array(ChatEntrySchema).describe("List of chat messages.").default([]),
});

export const GenTableChatCompletionChunksSchema = z.object({
    object: z.enum(["gen_table.completion.chunks"]),
    columns: z.record(z.string(), ChatCompletionChunkSchema),
    row_id: z.string(),
});

export const GenTableStreamChatCompletionChunkSchema = ChatCompletionChunkSchema.extend({
    output_column_name: z.string(),
    row_id: z.string(),
});

export const GenTableStreamReferencesSchema = ReferencesSchema.extend({
    object: z.enum(["gen_table.reference"]),
    output_column_name: z.string(),
});

export const CreateChatTableRequestSchema = CreateTableRequestSchema;
export type CreateChatTableRequest = z.infer<typeof CreateChatTableRequestSchema>;

export type GetConversationThreadRequest = z.infer<typeof GetConversationThreadRequestSchema>;
export type GetConversationThreadResponse = z.infer<typeof GetConversationThreadResponseSchema>;
export type GenTableChatCompletionChunks = z.infer<typeof GenTableChatCompletionChunksSchema>;
export type GenTableStreamChatCompletionChunk = z.infer<typeof GenTableStreamChatCompletionChunkSchema>;
export type GenTableStreamReferences = z.infer<typeof GenTableStreamReferencesSchema>;
